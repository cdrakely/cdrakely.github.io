{
  "hash": "541e8d8501418ad2bd9109ca2dc223a8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"The Starting Hand Question\"\nauthor: \"Clay Drakely\"\ndate: \"2025-02-09\"\ncategories: [R, combinatorics, mathematics]\ntoc: true\ntoc-depth: 6\nimage: \"Kithkin_Rabble_SHM.jpg\"\n---\n\n\n\n# Inspiration\n\nI received a question from a friend one afternoon. This friend is a software engineer and an avid [Magic: The Gathering](https://magic.wizards.com/en/intro){target=_blank} player. Naturally, then, it comes as no surprise the question was about optimizing his deck via some complex mathematics. I've titled this blog **The Starting Hand Question** since the question was specific to **MTG** but&mdash;since mathematicians love abstraction&mdash;I explored the question in a more *generic* setting. So, if you choose, perhaps think of this as **The 60 Marble Question**, or similar.\n\nThis exploration was originally made `Jan 22, 2022`.\n\n---\n\n## The Question\n\n> I have a deck of 60 cards. Within that deck I have 3 distinct cards $\\{A,B,C\\}$, each with 4 copies ($|A| = 4,\\ ...$). When I play a game my starting hand is **7** cards. What's the probability I have a starting hand that has at least 1 from each of $\\{A,B,C\\}$?\n\nNotably, 4 is the maximum allowance for duplicate cards in the standard format in **MTG** tournaments.\n\nFurther, he had already taken the liberty of exhaustively simulating every hand in **python** and already knew the answer to be:\n<details><summary>Spoil the answer for me</summary>*18,179,328* successes out of *386,206,920* possibilites (*4.71%*)</details>\n\n---\n\nThis gave me a starting point to explore as my combinatorics/statistics skills have never been top-notch. I discovered tools online after this exercise that are better implemented but since I found them after-the-fact I'm still willing to claim this work as my own. Deal with it.\n\n## The Algorithm\n\n### Note\n\nWhat I found in the end was less of a closed solution and more of an algorithm to determine the number of successful outcomes.\n\n### Rephrased Problem\n\n> Given a set $D$ of finite elements with mutually exclusive sets $\\{C_1,C_2,\\cdots,C_n \\} = D$ and a set $\\{c_1, \\cdots , c_n \\ | \\ c_{i} = \\vert C_{i}\\vert , \\ 1 \\le i \\le n \\}$, how many ways can $h$ items be randomly drawn such that some specified quantity of $C_1,C_2,\\cdots,C_n$, say $Q = \\lbrace q_1,q_2,\\cdots,q_n \\rbrace$ where $q_i \\le c_i$ be present?\n\nIn my friends case,\n\n\n\n```{=tex}\n\\begin{align}\n    \\vert \\{C_1,C_2,\\cdots,C_n \\} \\vert = \\vert D \\vert & = 60, \\\\\n    h & = 7, \\\\\n    n & = 3, \\\\\n    c_{1, 2, 3} & = 4, \\\\\n    q_1 = q_2 = q_3 & =1\n\\end{align}\n```\n\n\n\n### The Details\n\n#### Informal Process\n\nFor the following to work, you must organize $C_1,C_2, \\cdots, C_n$ such that the cardinality of each set is in descending order. For my use case it doesn't matter, but if $\\vert C_2 \\vert \\gt \\vert C_1 \\vert$ you'd want to parse $C_2$ first.\n\nThen collect the remaining elements of $D$ that do not need to be distinguished at the end as a whole, resulting in an ordered list of **criterion** sets followed by a set of remaining elements $C_n$. Necessarily, all sets $C_1,C_2,\\cdots,C_n$ are mutually exclusive. Then, generate your summation in the following way:\n\n**Layer** $1$\n\n- Sum from 1 to the cardinality of the leading partition ($\\vert C_1\\vert = 4$ in our example). Include the binomial coefficient (“number of elements $k$ choose $i$”). Multiply this by the next stage and move downward.\n\n**Layer** $2$ **to** $(n-1)$\n\n- Sum from 1 to $h$ minus preceding levels (respecting the number of elements in this partition, allowing at least 1 card from ALL lower non-zero criterion levels. Same coefficient construction as Layer 1.\n\n**Layer** $N$\n\n- Sum in the same manner as the last step, only this time, instead of adding another layer, fill the rest of the hand/drawn set with cards from your non-criterion pile ($C_n$).\n\nEffectively, take the sum of draws which satisfy $C_{1, \\cdots , n}$.\n\n#### Formal Process\n\nLet,\n\n$A = \\{c_1,c_2,\\cdots,c_n\\}$ be the cardinality of the respective sets $C_n$\n\n<br>\nand\n<br>\n\n$N_c = \\sum_{i=1}^n c_i = \\vert D \\vert$. Of necessity, $N_c \\le h \\le \\vert D \\vert$\n\n\n---\n\n\n\n```{=tex}\n\\begin{gather}\n\\sum_{i_1=q_1}^{c_1} \\sum_{i_2=q_2}^{Min(c_2,h-\\sum_{j=1}^{2-1}i_j, [h-N_c + q_2])} \\cdots \\sum_{i_n=q_n}^{Min(c_n,h-\\sum_{k=1}^{n-1}i_k, [h-N_c + q_n])} \\binom{c_1}{i_1} \\binom{c_2}{i_2}\\cdots \\binom{c_n}{h-\\sum_{k=1}^{n-1}i_k}\n\\end{gather}\n```\n\n\n\n---\n\n**Description of:** $Min(c_2,h-\\sum_{j=1}^{1}i_j, [h-N_c + c_2])$\n\nTake the minimum of:\n\n1. $c_2$, the available cards for this partition\n1. $h-\\sum_{j=1}^{2-1}i_j$, Ensure we respect the hand size\n1. $[h-N_c + c_2]$, ensure we are able to satisfy remaining criteria\n\n\n## Answering The Question\n\nLet's take the original **Starting Hand Question**.\n\n<br>\n\n\n\n```{=tex}\n\\begin{align}\n    D & = \\lbrace C_1,C_2,C_3,C_4\\rbrace \\\\\n    A = \\{ c_1, c_2, c_3, c_4 \\} & = \\lbrace 4,4,4,48 \\rbrace \\\\\n    Q & = \\lbrace 1,1,1,0 \\rbrace \\\\\n    n & = 4 \\\\\n    \\vert D \\vert & = 60\n\\end{align}\n```\n\n\n\n<br>\n\n\n\n```{=tex}\n\\begin{gather}\n    \\sum_{i_1=1}^{4} \\lparen\n    \\sum_{i_2=1}^{Min(4,7-\\sum_{j=1}^{1}i_j, [7-3 + 1])} \\lbrace\n    \\sum_{i_3=1}^{Min(4,7-\\sum_{j=1}^{2}i_j, [7-3 + 1])} \\lparen\n    \\sum_{i_4=0}^{Min(48,7-\\sum_{j=1}^{3}i_j, [7-3 + 0])}\n        \\binom{4}{i_1}\n        \\binom{4}{i_2}\n        \\binom{4}{i_3}\n        \\binom{48}{7-\\sum_{j=1}^{3}i_j} \\rparen \\rbrace \\rparen\n\\end{gather}\n```\n\n\n\n<br>\n\nHere is the R translation I made of the above using only base packages:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"R Translation using Base R\" code-line-numbers=\"true\"}\n# 1. hand_size is an integer of the draw size\n#    - Ex. You draw 7 cards for Uno.\n# 2. available is a vector of the # of items in the total pool\n#    - Ex. There are 26 red and 26 black cards in a standard deck - c(26,26).\n#    The sum of available should be the total deck size. Non-differentiated\n#    items should be grouped into one entity at the end.\n# 3. criteria is the number of items from available needed\n#    for a beginning hand size.\n#    - Ex. If I need 2 red cards and 1 black in my starting draw: c(2,1).\n#      In this example, we don't have a third 0 entry, since the deck is only\n#      red or black.\n#    - Ex. If I need 2 reds, 1 blue, and 1 green for a starting Uno hand\n#      I would use a criteria of c(2,1,1,0), where 0 declares I don't need\n#      any yellow cards.\n#\n# Output -\n# successes: Number of possible successes\n# total_possibilities: Number of total outcomes\n# percentage_success: Not rounded or multiplied by 100\n# calculation_terms: Number of terms in the sum in algorithm\n# terms_details: Details of those calculation_terms, represents a\n#   vector of variations of draws from the sets in available\n#   that represent a success and a full hand drawn.\n# Execution time: Time in seconds to execute.\ndeck_comb_tot <- function(hand_size, available, criteria) {\n    # First iteration is a for loop, remaining are recursed.\n    start_time <- Sys.time()\n    calculation_terms <- 0\n    loop_track <- c(rep(0, length(available)))\n    terms_detail <- list()\n    terms_success_number <- c()\n    recurse_ret <- comb_recurse_tot(\n        1, 0, loop_track,\n        terms_detail,\n        terms_success_number,\n        hand_size, available, criteria, calculation_terms\n    )\n\n    poss <- choose(sum(available), hand_size)\n    return(list(\n        successes = recurse_ret[[1]],\n        total_possibilities = poss,\n        percentage_success = recurse_ret[[1]] / poss,\n        calculation_terms = recurse_ret[[2]],\n        terms_detail = recurse_ret[3],\n        terms_success_number = recurse_ret[[4]],\n        execution_time = Sys.time() - start_time\n    ))\n}\n\ncomb_recurse_tot <- function(\n    depth, cur_hand, loop_track, terms_detail,\n    terms_success_number,\n    hand_size, avail, crit, calc_terms) {\n    # Recursive while loop\n    ret <- 0\n    iter <- crit[depth]\n    # Hand size stipulates how many elements\n    # sum(crit) reminds how many required elements we\n    #   need in the hand for success\n    # crit[depth] rolls back in the current items requirements\n    #   which makes max_iter the maximum number of elements\n    #   of this set that can be present and still render\n    #   a success.\n    max_iter <- hand_size - sum(crit) + crit[depth]\n    while (iter <= min(\n        avail[depth], # Can't have more elements that the set contains\n        hand_size - sum(cur_hand), # Can't have more elements than the hand size\n        max_iter # Can't break success criteria of the remaining sets\n    )) {\n        loop_track[depth] <- iter\n        if (depth != length(avail)) {\n            marg_ret <- comb_recurse_tot(\n                depth + 1, cur_hand + iter,\n                loop_track, terms_detail,\n                terms_success_number,\n                hand_size, avail, crit, calc_terms\n            )\n            ret <- ret + marg_ret[[1]]\n            calc_terms <- marg_ret[[2]]\n            terms_detail <- marg_ret[[3]]\n            terms_success_number <- marg_ret[[4]]\n        } else {\n            layer_return <- comb_calc(\n                avail, loop_track, hand_size,\n                terms_detail, terms_success_number\n            )\n            ret <- ret + layer_return[[1]]\n            calc_terms <- calc_terms + 1\n            terms_detail <- layer_return[[2]]\n            terms_success_number <- layer_return[[3]]\n            break\n        }\n        iter <- iter + 1\n    }\n\n    return(list(ret, calc_terms, terms_detail, terms_success_number))\n}\n\ncomb_calc <- function(\n    avail, loop_track, hand_size,\n    terms_detail, terms_success_number) {\n    terms <- length(avail)\n    product <- 1\n    # Test for single term use case, otherwise for loop behaves unexpectedly.\n    if (terms > 1) {\n        # For the first n-1 terms we want to calculate using criterion cards.\n        for (t in 1:(terms - 1)) {\n            product <- product * choose(avail[t], loop_track[t])\n        }\n    }\n    # The nth term will fill the rest of the hand with remaining cards.\n    product <- product * choose(avail[terms], hand_size - sum(loop_track))\n    full_hand <- loop_track\n    full_hand[length(avail)] <- hand_size - sum(loop_track)\n    terms_detail <- append(terms_detail, list(full_hand))\n    terms_success_number <- append(terms_success_number, product)\n    return(list(product, terms_detail, terms_success_number))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Function Call to Answer Our Question\"}\nanswer_feedback <- deck_comb_tot(\n    hand_size = 7,\n    available = c(4, 4, 4, 48),\n    criteria = c(1, 1, 1, 0)\n)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nOutput:\n\n---\n\nTotal # of possible combinations: **386\\,206\\,920**\n\nTotal # of success combinations: **18\\,179\\,328**\n\nPercent chance of drawing in opening hand: **4.71%**\n\nIterations required to complete this calculation: **32**\n\nExecution Time: **40ms**\n\n\n\n::: {.cell}\n\n:::\n\n\n\nThe below table represents the details from each calculation term, and the number of *cards* present from each of the criteria groups in that successful construction.\n<br>\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"Criteria 1\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Criteria 2\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Criteria 3\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Criteria 4\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Possible Hands with Term\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"12,453,120\",\"_rn_\":\"1\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"1,660,416\",\"_rn_\":\"2\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"3\",\"4\":\"2\",\"5\":\"72,192\",\"_rn_\":\"3\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"4\",\"4\":\"1\",\"5\":\"768\",\"_rn_\":\"4\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"1,660,416\",\"_rn_\":\"5\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"162,432\",\"_rn_\":\"6\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"3\",\"4\":\"1\",\"5\":\"4,608\",\"_rn_\":\"7\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"4\",\"4\":\"0\",\"5\":\"24\",\"_rn_\":\"8\"},{\"1\":\"1\",\"2\":\"3\",\"3\":\"1\",\"4\":\"2\",\"5\":\"72,192\",\"_rn_\":\"9\"},{\"1\":\"1\",\"2\":\"3\",\"3\":\"2\",\"4\":\"1\",\"5\":\"4,608\",\"_rn_\":\"10\"},{\"1\":\"1\",\"2\":\"3\",\"3\":\"3\",\"4\":\"0\",\"5\":\"64\",\"_rn_\":\"11\"},{\"1\":\"1\",\"2\":\"4\",\"3\":\"1\",\"4\":\"1\",\"5\":\"768\",\"_rn_\":\"12\"},{\"1\":\"1\",\"2\":\"4\",\"3\":\"2\",\"4\":\"0\",\"5\":\"24\",\"_rn_\":\"13\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"1,660,416\",\"_rn_\":\"14\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"162,432\",\"_rn_\":\"15\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"3\",\"4\":\"1\",\"5\":\"4,608\",\"_rn_\":\"16\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"4\",\"4\":\"0\",\"5\":\"24\",\"_rn_\":\"17\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"162,432\",\"_rn_\":\"18\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"10,368\",\"_rn_\":\"19\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"3\",\"4\":\"0\",\"5\":\"144\",\"_rn_\":\"20\"},{\"1\":\"2\",\"2\":\"3\",\"3\":\"1\",\"4\":\"1\",\"5\":\"4,608\",\"_rn_\":\"21\"},{\"1\":\"2\",\"2\":\"3\",\"3\":\"2\",\"4\":\"0\",\"5\":\"144\",\"_rn_\":\"22\"},{\"1\":\"2\",\"2\":\"4\",\"3\":\"1\",\"4\":\"0\",\"5\":\"24\",\"_rn_\":\"23\"},{\"1\":\"3\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"72,192\",\"_rn_\":\"24\"},{\"1\":\"3\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"4,608\",\"_rn_\":\"25\"},{\"1\":\"3\",\"2\":\"1\",\"3\":\"3\",\"4\":\"0\",\"5\":\"64\",\"_rn_\":\"26\"},{\"1\":\"3\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"4,608\",\"_rn_\":\"27\"},{\"1\":\"3\",\"2\":\"2\",\"3\":\"2\",\"4\":\"0\",\"5\":\"144\",\"_rn_\":\"28\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"1\",\"4\":\"0\",\"5\":\"64\",\"_rn_\":\"29\"},{\"1\":\"4\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"768\",\"_rn_\":\"30\"},{\"1\":\"4\",\"2\":\"1\",\"3\":\"2\",\"4\":\"0\",\"5\":\"24\",\"_rn_\":\"31\"},{\"1\":\"4\",\"2\":\"2\",\"3\":\"1\",\"4\":\"0\",\"5\":\"24\",\"_rn_\":\"32\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n---\n\nIn simple terms, the algorithm can be thought of generating the # of hands that respect each of these individual calculation terms above, then finding the total sum.\n\n## More Examples\n\n::: {.panel-tabset}\n\n### A Partial Flush\n\n> Given a standard card deck, what's the probability you draw three of one suit, and three of another in a **7-card** draw?\n\nFor a set up, we need to define 3 things:\n\n1. Our hand size: `7`\n1. The cardinality of our available sets: `13 each of the two we want,  26 we don't`\n    a. we don't care which suits gets us there, just the number\n1. The number of cards we need from each set to be successful: `3, 3, 0`\n    a. note the third is zero because we dont' *need* any to declare success\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Function Call for Flush Example\"}\nflush_answer_feedback <- deck_comb_tot(\n    hand_size = 7,\n    available = c(13, 13, 26),\n    criteria = c(3, 3, 0)\n)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nOutput:\n\n---\n\nTotal # of possible combinations: **133\\,784\\,560**\n\nTotal # of success combinations: **2\\,535\\,676**\n\nPercent chance of drawing in opening hand: **1.9%**\n\nIterations required to complete this calculation: **3**\n\nExecution Time: **0ms**\n\n\n\n::: {.cell}\n\n:::\n\n\n\nOutput:\n<br>\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| Criteria 1| Criteria 2| Criteria 3| Possible Hands with Term|\n|----------:|----------:|----------:|------------------------:|\n|          3|          3|          1|                2,126,696|\n|          3|          4|          0|                  204,490|\n|          4|          3|          0|                  204,490|\n\n\n:::\n:::\n\n\n\nThere's only a few terms here because we really don't have that much flexibility in the prompt. Out of 7 cards, we've declared what 6 need to be. With three possible groups for that 7th to come from we get three separate terms, each accounting for a huge number of hands fitting that criteria.\n\n### Cribbage\n\n> In a game of [cribbage](https://en.wikipedia.org/wiki/Cribbage), what's the probability you draw three 5's and a Jack?\n\nFor a set up, we need to define 3 things:\n\n1. Our hand size: `6`\n1. The cardinality of our available sets: `4, 4, 44`\n1. The number of cards we need from each set to be successful: `3, 1, 0`\n    a. note the third is zero because we dont' *need* any to declare success\n\n::: {.callout-note}\n\nFor 2. We choose not to care which suit the Jack is\n<br>\nand reminder that for 3. we the third group is zero because we don't need any for success\n\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Function Call for cribbage Example\"}\ncribbage_answer_feedback <- deck_comb_tot(\n    hand_size = 6,\n    available = c(4, 4, 44),\n    criteria = c(3, 1, 0)\n)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nOutput:\n\n---\n\nTotal # of possible combinations: **20\\,358\\,520**\n\nTotal # of success combinations: **16\\,390**\n\nPercent chance of drawing in opening hand: **0.08%**\n\nIterations required to complete this calculation: **5**\n\nExecution Time: **0ms**\n\n\n\n::: {.cell}\n\n:::\n\n\n\nOutput:\n<br>\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| Criteria 1| Criteria 2| Criteria 3| Possible Hands with Term|\n|----------:|----------:|----------:|------------------------:|\n|          3|          1|          2|                   15,136|\n|          3|          2|          1|                    1,056|\n|          3|          3|          0|                       16|\n|          4|          1|          1|                      176|\n|          4|          2|          0|                        6|\n\n\n:::\n:::\n\n\n\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}